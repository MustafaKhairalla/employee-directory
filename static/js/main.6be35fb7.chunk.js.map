{"version":3,"sources":["components/nav/Nav.js","components/section/SearchForm.js","components/result/result.js","components/search/Search.js","App.js","serviceWorker.js","index.js"],"names":["Nav","className","href","SearchForm","props","htmlFor","value","search","onChange","handleInputChange","placeholder","type","onClick","handleFormSubmit","divStyle","textAlign","background","SearchResults","results","map","result","style","key","id","firstname","lastname","age","hobby","Search","state","filterData","searchText","error","event","setState","target","preventDefault","getUserByName","Data","this","filter","includes","users","getUsers","console","log","lenght","length","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"+uBAYeA,MAVf,WACI,OACI,yBAAKC,UAAU,kDACX,uBAAGA,UAAU,eAAeC,KAAK,KAAjC,wB,4BCmBGC,MArBf,SAAoBC,GAChB,OACI,0BAAMH,UAAU,UACZ,yBAAKA,UAAU,cACX,2BAAOI,QAAQ,SAAf,cACA,2BACIC,MAAOF,EAAMG,OACbC,SAAUJ,EAAMK,kBAChBR,UAAU,eACVS,YAAY,wBAIhB,4BAAQC,KAAK,SAASC,QAASR,EAAMS,iBAAkBZ,UAAU,mBAAjE,aCdVa,EAAW,CACbC,UAAW,OACXC,WAAY,QA4BDC,MAzBf,SAAuBb,GACnB,OACI,wBAAIH,UAAU,6BACTG,EAAMc,QAAQC,KAAI,SAAAC,GAAM,OACrB,yBAAKC,MAAOP,GACR,wBAAIQ,IAAKF,EAAOG,GAAItB,UAAU,mBAA9B,eACiBmB,EAAOI,WAExB,wBAAIF,IAAKF,EAAOG,GAAItB,UAAU,mBAA9B,cACgBmB,EAAOK,UAEvB,wBAAIH,IAAKF,EAAOG,GAAItB,UAAU,mBAA9B,QACUmB,EAAOM,KAEjB,wBAAIJ,IAAKF,EAAOG,GAAItB,UAAU,mBAA9B,UACYmB,EAAOO,OAEnB,mC,OCgDLC,E,4MAlEXC,MAAQ,CACJtB,OAAQ,GACRW,QAAS,GACTY,WAAY,GACZC,WAAY,GACZC,MAAO,I,EAwBXvB,kBAAoB,SAAAwB,GAChB,EAAKC,SAAS,CAAEH,WAAYE,EAAME,OAAO7B,S,EAI7CO,iBAAmB,SAAAoB,GACfA,EAAMG,iBADkB,IAEhBL,EAAe,EAAKF,MAApBE,WACFD,EAAa,EAAKO,cAAcN,GAEtC,EAAKG,SAAS,CAAEJ,WAAYA,EAAYvB,OAAQwB,K,yDA3BhD,OAAOO,I,oCAGGhC,GAKV,OAHoBiC,KAAKV,MAAjBX,QAGOsB,QAAO,SAAApB,GAAM,OAAIA,EAAOI,UAAUiB,SAASnC,Q,0CAK1D,IAAMoC,EAAQH,KAAKI,WACnBJ,KAAKL,SAAS,CAAEhB,QAASwB,M,+BAgBnB,IAAD,EAEmCH,KAAKV,MAArCtB,EAFH,EAEGA,OAAQW,EAFX,EAEWA,QAASY,EAFpB,EAEoBA,WAEzB,OADAc,QAAQC,IAAI,CAAEtC,SAAQW,UAASY,aAAYgB,OAAQvC,EAAOwC,SAEtD,6BAEI,wBAAI9C,UAAU,eAAd,kBAEA,kBAAC,EAAD,CACIY,iBAAkB0B,KAAK1B,iBACvBJ,kBAAmB8B,KAAK9B,kBACxBS,QAASA,IAGTX,EAAOwC,OAAS,EAAI,kBAAC,EAAD,CAAe7B,QAASY,IACtC,kBAAC,EAAD,CAAeZ,QAASA,S,GA3D7B8B,aCSNC,MATf,WACE,OACE,yBAAKhD,UAAU,OACb,kBAAC,EAAD,MACA,kBAAC,EAAD,QCGciD,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAlC,GACLY,QAAQZ,MAAMA,EAAMmC,c","file":"static/js/main.6be35fb7.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nfunction Nav() {\r\n    return (\r\n        <nav className=\"navbar navbar-expand-lg navbar-dark bg-primary\">\r\n            <a className=\"navbar-brand\" href=\"/\">\r\n                Employee Directory\r\n      </a>\r\n        </nav>\r\n    );\r\n}\r\n\r\nexport default Nav;\r\n","import React from \"react\";\r\n\r\n// Using the datalist element we can create autofill suggestions based on the props.breeds array\r\nfunction SearchForm(props) {\r\n    return (\r\n        <form className=\"search\">\r\n            <div className=\"form-group\">\r\n                <label htmlFor=\"breed\">User Name:</label>\r\n                <input\r\n                    value={props.search}\r\n                    onChange={props.handleInputChange}\r\n                    className=\"form-control\"\r\n                    placeholder=\"Type in a User Name\"\r\n\r\n                />\r\n\r\n                <button type=\"submit\" onClick={props.handleFormSubmit} className=\"btn btn-success\">\r\n                    Search\r\n        </button>\r\n            </div>\r\n        </form>\r\n    );\r\n}\r\n\r\nexport default SearchForm;\r\n","import React from \"react\";\r\n\r\nconst divStyle = {\r\n    textAlign: \"left\",\r\n    background: \"grey\"\r\n}\r\n\r\nfunction SearchResults(props) {\r\n    return (\r\n        <ul className=\"list-group search-results\">\r\n            {props.results.map(result => (\r\n                <div style={divStyle}>\r\n                    <li key={result.id} className=\"list-group-item\">\r\n                        first Name: {result.firstname}\r\n                    </li>\r\n                    <li key={result.id} className=\"list-group-item\">\r\n                        Last Name: {result.lastname}\r\n                    </li>\r\n                    <li key={result.id} className=\"list-group-item\">\r\n                        Age: {result.age}\r\n                    </li>\r\n                    <li key={result.id} className=\"list-group-item\">\r\n                        Hobby: {result.hobby}\r\n                    </li>\r\n                    <br />\r\n                </div>\r\n\r\n            ))}\r\n        </ul>\r\n    );\r\n}\r\n\r\nexport default SearchResults;\r\n","import React, { Component } from \"react\";\r\nimport SearchForm from \"../section/SearchForm\";\r\nimport SearchResults from \"../result/result\";\r\nimport Data from \"../../users.json\";\r\n\r\nclass Search extends Component {\r\n    state = {\r\n        search: \"\",\r\n        results: [],\r\n        filterData: [],\r\n        searchText: '',\r\n        error: \"\"\r\n    };\r\n\r\n    getUsers() {\r\n        //return JSON.parse(Data);\r\n\r\n\r\n        return Data\r\n    };\r\n\r\n    getUserByName(value) {\r\n\r\n        const { results } = this.state;\r\n\r\n        // 1 people\r\n        return results.filter(result => result.firstname.includes(value))\r\n    }\r\n\r\n    // When the component mounts, get a list of all available base breeds and update this.state.breeds\r\n    componentDidMount() {\r\n        const users = this.getUsers()\r\n        this.setState({ results: users })\r\n    }\r\n\r\n    handleInputChange = event => {\r\n        this.setState({ searchText: event.target.value });\r\n\r\n    };\r\n\r\n    handleFormSubmit = event => {\r\n        event.preventDefault();\r\n        const { searchText } = this.state\r\n        const filterData = this.getUserByName(searchText);\r\n\r\n        this.setState({ filterData: filterData, search: searchText });\r\n\r\n    };\r\n    render() {\r\n\r\n        const { search, results, filterData } = this.state;\r\n        console.log({ search, results, filterData, lenght: search.length })\r\n        return (\r\n            <div>\r\n\r\n                <h1 className=\"text-center\">Search By Name</h1>\r\n\r\n                <SearchForm\r\n                    handleFormSubmit={this.handleFormSubmit}\r\n                    handleInputChange={this.handleInputChange}\r\n                    results={results}\r\n                />\r\n                {\r\n                    search.length > 0 ? <SearchResults results={filterData} />\r\n                        : <SearchResults results={results} />\r\n                }\r\n\r\n            </div >\r\n        );\r\n    }\r\n}\r\n\r\nexport default Search;","import React from 'react';\nimport './App.css';\nimport Nav from './components/nav/Nav';\nimport Search from \"./components/search/Search\"\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Nav />\n      <Search />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}